from telegram import Update
from telegram.ext import ContextTypes
from .rpc_client import call_mcp

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ ---
from functions.local_data.reader import read_json_async
from core.settings import Settings
# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---


HELP_MESSAGE = """\
Hi! I'm your AI Hub bot. üöÄ

*Available commands:*
‚Ä¢ `/help` ‚Äî Show this message.
‚Ä¢ `/digest <name>` ‚Äî Trigger a digest build (e.g., `/digest news_by`).
‚Ä¢ `/why <incident_id>` ‚Äî Explain a system incident.

You can also reply to any digest message to ask follow-up questions.
"""

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(HELP_MESSAGE, parse_mode="Markdown")

async def digest_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ MCP."""
    if not context.args:
        await update.message.reply_text("Usage: /digest <name> (e.g., news, gaming, sys)")
        return
    
    config_name = context.args[0]
    method_map = {"news": "news.build", "gaming": "news.build", "entertainment": "news.build", "news_by": "news.build", "news_tr": "news.build"}
    rpc_method = method_map.get(config_name, f"{config_name}.build")

    await update.message.reply_text(f"‚è≥ Requesting digest '{config_name}' via MCP...")
    await call_mcp(rpc_method, config_name=config_name)

async def why_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—ä—è—Å–Ω—è–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è 'clarify' —Ç–æ–ø–∏–∫."""
    if not context.args:
        await update.message.reply_text("Usage: /why <incident_id>")
        return

    settings = Settings()
    inc_id = context.args[0]
    inc_path = settings.STATE_DIR / "incidents" / f"{inc_id}.json"
    
    incident_data = await read_json_async(inc_path)
    if not incident_data:
        await update.message.reply_text(f"Incident '{inc_id}' not found.")
        return

    await update.message.reply_text("üß† Analyzing incident...")
    explanation = await call_mcp("assist.digest", kind="clarify", params={"incident": incident_data})
    await update.message.reply_text(explanation)

async def on_message_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç—ã."""
    prompt = update.message.text
    if reply := update.message.reply_to_message:
        prompt = f"Context:\n---\n{reply.text}\n---\nUser question: {prompt}"

    response = await call_mcp("assist.chat", prompt=prompt)
    await update.message.reply_text(response)